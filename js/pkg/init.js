// Generated by CoffeeScript 1.12.4
var fs, help, mergeDefaults, path, stabilityLevels;

mergeDefaults = require("mergeDefaults");

path = require("path");

fs = require("io/sync");

stabilityLevels = {
  experimental: "![experimental](https://img.shields.io/badge/stability-experimental-EC5315.svg?style=flat)",
  stable: "![stable](https://img.shields.io/badge/stability-stable-4EBA0F.svg?style=flat)",
  locked: "![locked](https://img.shields.io/badge/stability-locked-0084B6.svg?style=flat)"
};

module.exports = function(args) {
  var ignorePath, ignoredPaths, json, jsonPath, jsonString, licensePath, licenseTemplatePath, moduleName, modulePath, readmePath, specPath, srcPath, stability, stabilityLevel;
  if (args.help) {
    log(help);
    return;
  }
  moduleName = args._[0];
  if (!moduleName) {
    log.warn("Must provide a module name!");
    return;
  }
  modulePath = path.resolve(moduleName);
  if (fs.exists(modulePath)) {
    log.warn("Module already exists:\n  " + modulePath);
    return;
  }
  json = {
    name: moduleName,
    description: args.d || args.description,
    version: args.v || args.version || "0.0.1",
    main: args.m || args.main
  };
  if (json.description && typeof json.description !== "string") {
    log.warn("--description must provide a string!");
    return;
  }
  if (typeof json.version !== "string") {
    log.warn("--version must provide a string!");
    return;
  }
  if (json.main && typeof json.main !== "string") {
    log.warn("--main must provide a string!");
    return;
  }
  ignoredPaths = ["node_modules/"];
  if (args.c || args.coffee) {
    ignoredPaths.push("js/");
    if (json.main == null) {
      json.main = "js/index";
    }
    json.plugins = ["lotus-coffee"];
    json.scripts = {
      build: "coffee-build -v 1.12.x -b -o js src",
      postinstall: "npm run build"
    };
  }
  stabilityLevel = (stability = args.s || args.stability) ? stabilityLevels[stability] : "";
  if (stabilityLevel === void 0) {
    log.warn("Invalid stability level: '" + stability + "'\n\nValid values:\n  " + (Object.keys(stabilityLevels).join('\n  ')));
    return;
  }
  fs.writeDir(modulePath);
  log.it("Creating directory: '" + modulePath + "'");
  srcPath = path.join(modulePath, "src");
  fs.writeDir(srcPath);
  log.it("Creating directory: '" + srcPath + "'");
  specPath = path.join(modulePath, "spec");
  fs.writeDir(specPath);
  log.it("Creating directory: '" + specPath + "'");
  jsonPath = path.join(modulePath, "package.json");
  jsonString = JSON.stringify(json, null, 2);
  fs.write(jsonPath, jsonString + log.ln);
  log.it("Creating file: '" + jsonPath + "'");
  ignorePath = path.join(modulePath, ".gitignore");
  fs.write(ignorePath, ignoredPaths.join(log.ln));
  log.it("Creating file: '" + ignorePath + "'");
  licensePath = path.join(modulePath, "LICENSE");
  licenseTemplatePath = path.resolve(__dirname, "../../templates/LICENSE");
  fs.write(licensePath, fs.read(licenseTemplatePath));
  log.it("Creating file: '" + licensePath + "'");
  readmePath = path.join(modulePath, "README.md");
  fs.write(readmePath, "\n# " + json.name + " v" + json.version + " " + stabilityLevel + "\n");
  log.it("Creating file: '" + readmePath + "'");
};

help = "Options:\n\n  --coffee -c\n    Transpile from 'src' to 'js' directory\n\n  --version -v\n    Bump to a specific version\n\n  --description -d\n    The \"description\" field of package.json\n\n  --main -m\n    The \"main\" field of package.json\n\n  --stability -s\n    Must equal \"experimental\", \"stable\", or \"locked\"";
