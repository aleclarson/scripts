// Generated by CoffeeScript 1.12.4
var bumpCurrentPackage, bumpDependencies, fs, git, path, pushBranch, semver;

semver = require("node-semver");

path = require("path");

git = require("git-utils");

fs = require("io/sync");

bumpDependencies = require("./utils/bumpDependencies");

pushBranch = require("./utils/pushBranch");

module.exports = function(args) {
  var depNames;
  depNames = args._;
  if (depNames.length) {
    return bumpDependencies(depNames, args);
  } else {
    return bumpCurrentPackage(args);
  }
};

bumpCurrentPackage = function(args) {
  var json, jsonPath, modulePath, version;
  modulePath = process.cwd();
  jsonPath = path.resolve("package.json");
  json = require(jsonPath);
  version = args.v || semver.inc(json.version, args.minor ? "minor" : args.major ? "major" : "patch");
  log.moat(1);
  log.gray(json.version);
  log.white(" -> ");
  log.green(version);
  log.moat(1);
  return git.isClean(modulePath).then(function(wasClean) {
    var readme, readmePath;
    readmePath = path.join(modulePath, "README.md");
    readme = fs.read(readmePath);
    fs.write(readmePath, readme.replace("v" + json.version, "v" + version));
    json.version = version;
    json = JSON.stringify(json, null, 2);
    fs.write(jsonPath, json + log.ln);
    if (!wasClean) {
      return;
    }
    return git.stageFiles(modulePath, "*").then(function() {
      return git.commit(modulePath, "Bump to v" + version);
    }).then(function() {
      return pushBranch(modulePath, {
        force: true
      });
    });
  });
};
