// Generated by CoffeeScript 1.12.4
var fs, isType, minimist, path;

require("../env");

minimist = require("minimist");

isType = require("isType");

path = require("path");

fs = require("io/sync");

module.exports = function(script, args) {
  var exit, index, scriptsInstalled, timeStart;
  if (args == null) {
    args = [];
  }
  log.indent = 2;
  log.moat(1);
  timeStart = Date.now();
  exit = process.exit;
  process.exit = function() {
    log.onceFlushed(function() {
      var timeEnd;
      timeEnd = Date.now();
      log.moat(1);
      log.gray.dim("Exiting after " + (timeEnd - timeStart) + "ms...");
      log.moat(1);
      log.flush();
      return exit.call(process);
    });
  };
  args = args.concat(process.argv.slice(2));
  args = minimist(args);
  scriptsInstalled = require("../scripts.json");
  index = scriptsInstalled.indexOf(script);
  if (index < 0) {
    return log.warn("Unrecognized script name: '" + script + "'\n\nValid scripts include:\n  " + (scriptsInstalled.join("\n  ")));
  }
  return Promise["try"](function() {
    var command, commands, start;
    start = require("./" + script);
    if (isType(start, Function)) {
      return start(args);
    }
    if (isType(start, Object)) {
      commands = [];
      while (args._.length) {
        commands.push(command = args._.shift());
        if (isType(start[command], Function)) {
          start = start[command]();
          if (isType(start, Function)) {
            return start(args);
          }
        }
        if (!isType(start, Object)) {
          break;
        }
      }
      throw Error("Unrecognized command: " + commands.join(" "));
    }
    throw Error("Script must return a function or object: " + script);
  }).fail(function(error) {
    log.moat(1);
    log.red(error.stack);
    log.moat(1);
  }).then(process.exit);
};
