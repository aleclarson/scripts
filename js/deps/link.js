// Generated by CoffeeScript 1.12.4
var createGlobalLink, createLink, createLocalLink, createLocalLinks, exec, fs, green, isType, npmBin, npmRoot, path, red, ref, resolveModule, sync, yellow;

resolveModule = require("resolve").resolveModule;

isType = require("isType");

path = require("path");

exec = require("exec");

sync = require("sync");

fs = require("io/sync");

npmBin = exec.sync("npm bin -g");

npmRoot = exec.sync("npm root -g");

ref = log.color, red = ref.red, green = ref.green, yellow = ref.yellow;

module.exports = function(args) {
  var moduleName, modulePath;
  modulePath = (moduleName = args._[0]) ? path.resolve(moduleName) : process.cwd();
  if (args.g || args.global) {
    createGlobalLink(modulePath, args);
  } else if (args._.length) {
    createLocalLink(modulePath, args);
  } else {
    createLocalLinks(modulePath, args);
  }
};

createLink = function(linkPath, targetPath, args) {
  if (!fs.exists(targetPath)) {
    log.warn("'targetPath' does not exist:\n  " + targetPath);
    return;
  }
  if (fs.exists(linkPath)) {
    if (args.f) {
      fs.remove(linkPath);
    } else {
      log.warn("'linkPath' already exists:\n  " + linkPath);
      return;
    }
  }
  log.moat(1);
  log.white("Creating symlink..\n  " + (green(linkPath)) + "\n..that points to:\n  " + (yellow(targetPath)));
  log.moat(1);
  fs.writeDir(path.dirname(linkPath));
  fs.writeLink(linkPath, targetPath);
};

createLocalLink = function(modulePath, args) {
  var linkPath, moduleName, targetPath;
  moduleName = path.basename(modulePath);
  linkPath = path.resolve("node_modules", moduleName);
  targetPath = path.join(npmRoot, moduleName);
  return createLink(linkPath, targetPath, args);
};

createGlobalLink = function(modulePath, args) {
  var binPath, json, jsonPath, linkPath, moduleName, ref1, scriptName, scriptPath;
  moduleName = path.basename(modulePath);
  linkPath = path.join(npmRoot, moduleName);
  createLink(linkPath, modulePath, args);
  jsonPath = path.join(modulePath, "package.json");
  if (!fs.isFile(jsonPath)) {
    return;
  }
  json = require(jsonPath);
  if (!isType(json.bin, Object)) {
    return;
  }
  ref1 = json.bin;
  for (scriptName in ref1) {
    scriptPath = ref1[scriptName];
    scriptPath = path.resolve(modulePath, scriptPath);
    binPath = path.join(npmBin, scriptName);
    log.moat(1);
    log.white("Creating symlink..\n  " + (green(binPath)) + "\n..that points to:\n  " + (yellow(scriptPath)));
    log.moat(1);
    fs.writeLink(binPath, scriptPath);
    fs.setMode(binPath, "755");
  }
};

createLocalLinks = function(modulePath, args) {
  var dep, deps, gitRegex, globalPath, isGit, json, jsonPath, linkPath, name, results, version;
  jsonPath = path.join(modulePath, "package.json");
  if (!fs.isFile(jsonPath)) {
    return;
  }
  json = require(jsonPath);
  deps = json.dependencies;
  if (!isType(deps, Object)) {
    return;
  }
  gitRegex = /[^\/]+\/[^\#]+(\#.+)?/g;
  results = [];
  for (name in deps) {
    version = deps[name];
    isGit = gitRegex.test(version);
    if (!(dep = resolveModule(name, modulePath))) {
      log.warn("Cannot resolve dependency: " + (green(name)) + " " + (yellow(version)));
      continue;
    }
    globalPath = path.join(npmRoot, name);
    if (!fs.exists(globalPath)) {
      log.warn("Global dependency does not exist: " + (green(globalPath)));
      continue;
    }
    linkPath = path.join(modulePath, "node_modules", name);
    if (fs.exists(linkPath)) {
      if (!fs.isLink(linkPath)) {
        continue;
      }
      if (!fs.isLinkBroken(linkPath)) {
        continue;
      }
      fs.remove(linkPath);
      log.moat(1);
      log.white("Removing broken symlink: " + (red(name)));
      log.moat(1);
    }
    results.push(createLink(linkPath, globalPath, args));
  }
  return results;
};
