// Generated by CoffeeScript 1.12.4
var Random, git, path, pushBranch, updatePackageTag;

Random = require("random");

path = require("path");

git = require("git-utils");

pushBranch = require("./utils/pushBranch");

module.exports = function(args) {
  var modulePath;
  modulePath = path.resolve(args._[0] || "");
  if (!git.isRepo(modulePath)) {
    return log.warn("Current directory must be a git repository!");
  }
  return git.isClean(modulePath).then(function(clean) {
    if (clean) {
      return updatePackageTag(modulePath, args);
    } else {
      return log.warn("Current repo has uncommitted changes!");
    }
  });
};

updatePackageTag = function(modulePath, args) {
  var nextVersion, tmpBranch;
  nextVersion = null;
  tmpBranch = Random.id(12);
  return git.getBranch(modulePath).then(function(branch) {
    if (branch !== "unstable") {
      return git.setBranch(modulePath, "unstable");
    }
  }).then(function() {
    var jsonPath;
    jsonPath = path.resolve(modulePath, "package.json");
    return nextVersion = require(jsonPath).version;
  }).then(function() {
    return git.setBranch(modulePath, tmpBranch, {
      force: true
    });
  }).then(function() {
    return git.resetBranch(modulePath, null);
  }).then(function() {
    return git.commit(modulePath, "combine all commits");
  }).then(function(tmpCommit) {
    return git.setBranch(modulePath, "master").then(function() {
      return git.deleteFile(modulePath, "*", {
        force: true
      });
    }).then(function() {
      return git.commit(modulePath, "delete all files");
    }).then(function() {
      return git.pick(modulePath, tmpCommit);
    });
  }).then(function() {
    return git.deleteBranch(modulePath, tmpBranch);
  }).then(function() {
    return git.resetBranch(modulePath, "HEAD^^");
  }).then(function() {
    return git.findVersion(modulePath, nextVersion).then(function(version) {
      if (version !== null) {
        log.moat(1);
        log.white("Updating tag: ");
        log.green(nextVersion);
        log.moat(1);
        return git.revert(modulePath);
      }
      log.moat(1);
      log.white("Creating tag: ");
      log.green(nextVersion);
      log.moat(1);
    });
  }).then(function() {
    return git.commit(modulePath, nextVersion).then(function() {
      return git.addTag(modulePath, nextVersion, {
        force: true
      });
    }).then(function() {
      return pushBranch(modulePath, {
        force: true
      });
    });
  }).then(function() {
    return git.setBranch(modulePath, "unstable");
  });
};
